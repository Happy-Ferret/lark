fileTypes:
    - rs
keyEquivalent: ^~R
name: Rust
patterns:
    -
        include: '#block_doc_comment'
    -
        include: '#block_comment'
    -
        include: '#line_doc_comment'
    -
        include: '#line_comment'
    -
        match: '(\{)'
        name: punctuation.section.scope.begin.rust
    -
        match: '(\})'
        name: punctuation.section.scope.end.rust
    -
        begin: '#\!?\['
        beginCaptures:
            '0':
                name: punctuation.definition.attribute.begin.rust
        comment: Attribute
        end: '\]'
        endCaptures:
            '0':
                name: punctuation.definition.attribute.end.rust
        name: meta.attribute.rust
        patterns:
            -
                include: '#string_literal'
    -
        captures:
            '1':
                name: punctuation.definition.string.begin.rust
            '3':
                name: constant.character.escape.rust
            '5':
                name: punctuation.definition.string.end.rust
        comment: 'Single-quote string (character literal)'
        match: '('')([^''\\]|(\\(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)))('')'
        name: string.quoted.single.rust
    -
        include: '#string_literal'
    -
        include: '#raw_string'
    -
        comment: 'Floating point number (fraction)'
        match: '\b[0-9][0-9_]*\.[0-9][0-9_]*([eE][+-][0-9_]+)?(f32|f64)?\b'
        name: constant.numeric.float.rust
    -
        comment: 'Floating point number (exponent)'
        match: '\b[0-9][0-9_]*(\.[0-9][0-9_]*)?[eE][+-][0-9_]+(f32|f64)?\b'
        name: constant.numeric.float.rust
    -
        comment: 'Floating point number (typed)'
        match: '\b[0-9][0-9_]*(\.[0-9][0-9_]*)?([eE][+-][0-9_]+)?(f32|f64)\b'
        name: constant.numeric.float.rust
    -
        comment: 'Integer number (decimal)'
        match: '\b[0-9][0-9_]*([ui](8|16|32|64|128|size))?\b'
        name: constant.numeric.integer.decimal.rust
    -
        comment: 'Integer number (hexadecimal)'
        match: '\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|size))?\b'
        name: constant.numeric.integer.hexadecimal.rust
    -
        comment: 'Integer number (octal)'
        match: '\b0o[0-7_]+([ui](8|16|32|64|128|size))?\b'
        name: constant.numeric.integer.octal.rust
    -
        comment: 'Integer number (binary)'
        match: '\b0b[01_]+([ui](8|16|32|64|128|size))?\b'
        name: constant.numeric.integer.binary.rust
    -
        comment: 'Const storage modifier'
        match: \bconst\b
        name: storage.modifier.const.rust
    -
        comment: 'Static storage modifier'
        match: \bstatic\b
        name: storage.modifier.static.rust
    -
        comment: 'Visibility modifier'
        match: \b(priv|pub)\b
        name: storage.modifier.visibility.rust
    -
        comment: 'Boolean constant'
        match: \b(true|false)\b
        name: constant.language.boolean.rust
    -
        comment: 'Control keyword'
        match: \b(break|continue|do|else|if|in|for|loop|match|return|while)\b
        name: keyword.control.rust
    -
        comment: Keyword
        match: \b(crate|extern|mod|let|proc|ref|use)\b
        name: keyword.other.rust
    -
        comment: 'Unsafe code keyword'
        match: \bunsafe\b
        name: keyword.other.unsafe.rust
    -
        include: '#sigils'
    -
        include: '#storage_types'
    -
        include: '#std_types'
    -
        include: '#types'
    -
        include: '#kinds'
    -
        include: '#self'
    -
        include: '#mut'
    -
        include: '#box'
    -
        include: '#lifetime'
    -
        include: '#ref_lifetime'
    -
        comment: Operator
        match: '(\+|-|/|\*|=|\^|&|\||!|>|<|%|::|\.\.|\bas\b)'
        name: keyword.operator.rust
    -
        comment: 'Standard library macro'
        match: \b(log|error|warn|info|debug|log_enabled|fail|assert|assert_eq|unreachable|unimplemented|format|write|writeln|print|println|local_data_key|try|vec|select)!
        name: support.function.std.rust
    -
        comment: 'Standard library type variant'
        match: \b(Some|None|Ok|Err)\b
        name: support.constant.std.rust
    -
        captures:
            '1':
                name: entity.name.function.macro.rust
        comment: 'Invocation of a macro'
        match: '\b([a-zA-Z_][a-zA-Z0-9_]*\!)\s*[({\[]'
    -
        captures:
            '1':
                name: entity.name.function.rust.call
            '2':
                name: keyword.operator.rust
            '3':
                patterns:
                    - {include: '#storage_types'}
                    - {include: '#std_types'}
                    - {include: '#types'}
        comment: 'Function call'
        match: '\b([a-zA-Z_][a-zA-Z0-9_]*)(::<(.*)>)?\s*\('
    -
        captures:
            '1':
                name: meta.preprocessor.macro.rust
            '2':
                name: entity.name.macro.rust
        comment: 'Macro definition'
        match: '\b(macro_rules!)\s*([a-zA-Z_][a-zA-Z0-9_]*)\s*\{'
    -
        begin: '\b(fn)\s+([a-zA-Z_][a-zA-Z0-9_]*)'
        beginCaptures:
            '1':
                name: keyword.other.fn.rust
            '2':
                name: entity.name.function.rust
        comment: 'Function definition'
        end: '(?[\{;])'
        patterns:
            -
                include: '#type_params'
            -
                include: $self
    -
        begin: '\b(enum|struct|trait|type)\s+([a-zA-Z_][a-zA-Z0-9_]*)'
        beginCaptures:
            '1':
                name: storage.type.rust
            '2':
                name: entity.name.type.rust
        comment: 'Type declaration'
        end: '(?[\{;])'
        patterns:
            -
                include: '#type_params'
            -
                include: $self
    -
        begin: \b(impl)\b
        beginCaptures:
            '1':
                name: storage.type.rust
        comment: Implementation
        end: '(?\{)'
        patterns:
            -
                include: '#type_params'
            -
                include: $self
    -
        begin: ':'
        comment: 'Variable declaration'
        end: '[=;,\)\|]'
        patterns:
            -
                include: '#type_params'
            -
                include: $self
repository:
    block_comment:
        begin: '/\*'
        beginCaptures:
            '0':
                name: punctuation.definition.comment.begin.rust
        comment: 'Block comment'
        end: '\*/'
        endCaptures:
            '0':
                name: punctuation.definition.comment.end.rust
        name: comment.block.rust
        patterns:
            -
                include: '#block_doc_comment'
            -
                include: '#block_comment'
    block_doc_comment:
        begin: '/\*[!\*][^\*]'
        beginCaptures:
            '0':
                name: punctuation.definition.comment.begin.rust
        comment: 'Block documentation comment'
        end: '\*/'
        endCaptures:
            '0':
                name: punctuation.definition.comment.end.rust
        name: comment.block.documentation.rust
        patterns:
            -
                include: '#block_doc_comment'
            -
                include: '#block_comment'
    box:
        comment: 'Box storage modifier'
        match: \bbox\b
        name: storage.modifier.box.rust
    escaped_character:
        match: '\\(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
        name: constant.character.escape.rust
    kinds:
        comment: 'Built-in trait (kind)'
        match: \b(Send|Sized|Copy|Share)\b
        name: support.type.kind.rust
    lifetime:
        captures:
            '1':
                name: entity.name.lifetime.rust
        comment: 'Named lifetime'
        match: '''([a-zA-Z_][a-zA-Z0-9_]*)\b'
        name: storage.modifier.lifetime.rust
    line_comment:
        captures:
            '1':
                name: punctuation.definition.comment.rust
        comment: 'Single-line comment'
        match: '(//).*$\n?'
        name: comment.line.double-slash.rust
    line_doc_comment:
        captures:
            '1':
                name: punctuation.definition.comment.rust
        comment: 'Single-line documentation comment'
        match: '(//)[!/][^/].*$\n?'
        name: comment.line.documentation.rust
    mut:
        comment: 'Mutable storage modifier'
        match: \bmut\b
        name: storage.modifier.mut.rust
    raw_string:
        begin: 'r#"'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.rust
        comment: 'Raw string'
        end: '"#'
        endCaptures:
            '0':
                name: punctuation.definition.string.end.rust
        name: string.quoted.other.raw.rust
    ref_lifetime:
        captures:
            '1':
                name: storage.modifier.lifetime.rust
            '2':
                name: entity.name.lifetime.rust
        comment: 'Reference with named lifetime'
        match: '&(''([a-zA-Z_][a-zA-Z0-9_]*))\b'
    self:
        comment: 'Self variable'
        match: \bself\b
        name: variable.language.rust
    sigils:
        comment: Sigil
        match: '[&~@*](?=[a-zA-Z0-9_\(\[\|\"]+)'
        name: keyword.operator.sigil.rust
    std_types:
        comment: 'Standard library type'
        match: \b(Box|Vec|StrBuf|Path|Option|Result|Reader|Writer|Stream|Seek|Buffer|IoError|IoResult|Sender|SyncSender|Receiver|Cell|RefCell|Any)\b
        name: support.class.std.rust
    storage_types:
        comment: 'Built-in type'
        match: \b(bool|char|usize|isize|u8|u16|u32|u64|i8|i16|i32|i64|f32|f64|str|Self)\b
        name: storage.type.rust
    string_literal:
        begin: '"'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.rust
        comment: 'Double-quote string'
        end: '"'
        endCaptures:
            '0':
                name: punctuation.definition.string.end.rust
        name: string.quoted.double.rust
        patterns:
            -
                include: '#escaped_character'
    types:
        comment: 'struct or enum name'
        match: '\b([A-Z][A-Za-z]*)\b'
        name: support.class.rust
scopeName: source.rust
uuid: E54FA931-0668-4496-8922-F91520AD02B3
