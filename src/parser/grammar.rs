// auto-generated: "lalrpop 0.15.2"
// sha256: faa85c9a1c3949692ca1677cfd3cb57a088e349e1a136ad6923e2cec428535
use crate::parser::{Token, ParseError};
use crate::parser::grammar_helpers::*;
use crate::parser::ast::*;
use crate::parser::pos::{Span, Spanned};
use crate::parser::program::StringId;
use codespan::ByteIndex;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Program {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use crate::parser::{Token, ParseError};
    use crate::parser::grammar_helpers::*;
    use crate::parser::ast::*;
    use crate::parser::pos::{Span, Spanned};
    use crate::parser::program::StringId;
    use codespan::ByteIndex;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(StringId),
        Variant2(Spanned<Type>),
        Variant3(::std::option::Option<Spanned<Type>>),
        Variant4((Token, Expression)),
        Variant5(::std::option::Option<(Token, Expression)>),
        Variant6(Field),
        Variant7(::std::vec::Vec<Field>),
        Variant8(Spanned<StringId>),
        Variant9(::std::vec::Vec<Spanned<StringId>>),
        Variant10(Statement),
        Variant11(::std::vec::Vec<Statement>),
        Variant12(ByteIndex),
        Variant13(Block),
        Variant14(Item),
        Variant15(BlockOrIf),
        Variant16((::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>)),
        Variant17(Def),
        Variant18(Vec<Field>),
        Variant19(Vec<Spanned<StringId>>),
        Variant20(Vec<Statement>),
        Variant21(Expression),
        Variant22(Atom),
        Variant23(If),
        Variant24(::std::option::Option<Field>),
        Variant25(()),
        Variant26(::std::option::Option<Spanned<StringId>>),
        Variant27(Let),
        Variant28(Spanned<Mode>),
        Variant29(Pattern),
        Variant30(Path),
        Variant31(Module),
        Variant32(::std::option::Option<()>),
        Variant33(::std::option::Option<Statement>),
        Variant34(Struct),
        Variant35(::std::vec::Vec<Token>),
    }
    const __ACTION: &'static [i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 8, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0,
        // State 9
        -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, -107, 0, 0, -107, -107, 0, -107, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        -63, 0, 0, -63, 0, -63, -63, 0, 0, 0, 0, -63, -63, -63, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108, 0, 0, -108, -108, 0, -108, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 12, 0, 0, 10, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 20, -44, 0, 0, 0, 39, 0, 10, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 12, 0, 0, 0, 44, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 12, 0, 0, 14, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, -46, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, -95, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, -44, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, -75, 0, 0, 0, -75, 0, 14, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 59, 0, 0, 0,
        // State 39
        -102, 0, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, -30, 0, 0, 10, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 12, 0, 0, 0, 44, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, -24, 0, 0, -24, 0, 0, 0, -24, -24, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, -20, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, -77, 0, -77, -77, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 68, 0, -72, -72, 0, 0, 0, 0, 0, 0, -72, 0, 0, 0, 0, 0, -72, 0, 0, 0, 0,
        // State 57
        0, 0, 0, -76, 0, -76, -76, 0, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        -103, 0, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, -32, 0, 0, 10, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, -31, 0, 0, 14, 0, 0, 0, 0,
        // State 63
        -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, -21, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, -70, 72, 0, 0, 0, 0, 0, 0, -70, 0, 0, 0, 0, 0, -70, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 12, 0, 0, 0, 44, 0, 0, 0,
        // State 68
        0, 0, 0, -78, 0, -78, -78, 0, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, -33, 0, 0, 14, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, -71, -71, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0,
        // State 73
        0, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0,
        // State 74
        0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, -47, -47, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0,
        // State 75
        0, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, -48, -48, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 59, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, -52, 0, 0, 82, 0, 0, 0, -52, -52, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, -27, -27, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, -53, -53, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, 0, -28, 0, 0, 0, 0, 0, 0, -28, -28, 0, 0, 0, 0, 0, -28, 0, 0, 0, 0,
        // State 86
        0, 0, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, -29, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, -54, 0, 0, 90, 0, 0, 0, -54, -54, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, -55, -55, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0,
    ];
    const __EOF_ACTION: &'static [i8] = &[
        // State 0
        0,
        // State 1
        -66,
        // State 2
        -26,
        // State 3
        -89,
        // State 4
        -104,
        // State 5
        -25,
        // State 6
        0,
        // State 7
        0,
        // State 8
        -90,
        // State 9
        -107,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        -108,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        -34,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        -100,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        -24,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        -101,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
    ];
    const __GOTO: &'static [i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 25, 0, 26, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 30, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 34, 0, 0, 0, 35, 36, 0, 0, 0, 0, 0, 37,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 25, 0, 51, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 30, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 37,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 37,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 75, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 75, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 0, 0, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 75, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 91, 0, 0, 0, 0, 0, 0, 0, 86, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __expected_tokens(__state: usize) -> Vec<::std::string::String> {
        const __TERMINAL: &'static [&'static str] = &[
            r###"",""###,
            r###""->""###,
            r###"".""###,
            r###"":""###,
            r###""::""###,
            r###"";""###,
            r###""=""###,
            r###""_""###,
            r###""else""###,
            r###""for""###,
            r###""if""###,
            r###""unimpl""###,
            r###""{""###,
            r###""}""###,
            r###"borrow"###,
            r###"def"###,
            r###"identifier"###,
            r###"let"###,
            r###"loop"###,
            r###"newline"###,
            r###"own"###,
            r###"self"###,
            r###"struct"###,
            r###"while"###,
        ];
        __ACTION[(__state * 24)..].iter().zip(__TERMINAL).filter_map(|(&state, terminal)| {
            if state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct ProgramParser {
        _priv: (),
    }

    impl ProgramParser {
        pub fn new() -> ProgramParser {
            ProgramParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<Error=ParseError>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            __tokens0: __TOKENS,
        ) -> Result<Module, __lalrpop_util::ParseError<ByteIndex, Token, ParseError>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            let mut __states = vec![0_i8];
            let mut __symbols = vec![];
            let mut __integer;
            let mut __lookahead;
            let __last_location = &mut Default::default();
            '__shift: loop {
                __lookahead = match __tokens.next() {
                    Some(Ok(v)) => v,
                    None => break '__shift,
                    Some(Err(e)) => return Err(__lalrpop_util::ParseError::User { error: e }),
                };
                *__last_location = __lookahead.2.clone();
                __integer = match __lookahead.1 {
                    Token::Comma if true => 0,
                    Token::ThinArrow if true => 1,
                    Token::Period if true => 2,
                    Token::Colon if true => 3,
                    Token::DoubleColon if true => 4,
                    Token::Semicolon if true => 5,
                    Token::Equals if true => 6,
                    Token::Underscore if true => 7,
                    Token::KeywordElse if true => 8,
                    Token::KeywordFor if true => 9,
                    Token::KeywordIf if true => 10,
                    Token::Unimplemented if true => 11,
                    Token::CurlyBraceOpen if true => 12,
                    Token::CurlyBraceClose if true => 13,
                    Token::KeywordBorrow if true => 14,
                    Token::KeywordDef if true => 15,
                    Token::Identifier(_) if true => 16,
                    Token::KeywordLet if true => 17,
                    Token::KeywordLoop if true => 18,
                    Token::Newline if true => 19,
                    Token::KeywordOwn if true => 20,
                    Token::KeywordSelf if true => 21,
                    Token::KeywordStruct if true => 22,
                    Token::KeywordWhile if true => 23,
                    _ => {
                        let __state = *__states.last().unwrap() as usize;
                        let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                            token: Some(__lookahead),
                            expected: __expected_tokens(__state),
                        };
                        return Err(__error);
                    }
                };
                '__inner: loop {
                    let __state = *__states.last().unwrap() as usize;
                    let __action = __ACTION[__state * 24 + __integer];
                    if __action > 0 {
                        let __symbol = match __integer {
                            0 => match __lookahead.1 {
                                __tok @ Token::Comma => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            1 => match __lookahead.1 {
                                __tok @ Token::ThinArrow => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            2 => match __lookahead.1 {
                                __tok @ Token::Period => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            3 => match __lookahead.1 {
                                __tok @ Token::Colon => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            4 => match __lookahead.1 {
                                __tok @ Token::DoubleColon => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            5 => match __lookahead.1 {
                                __tok @ Token::Semicolon => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            6 => match __lookahead.1 {
                                __tok @ Token::Equals => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            7 => match __lookahead.1 {
                                __tok @ Token::Underscore => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            8 => match __lookahead.1 {
                                __tok @ Token::KeywordElse => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            9 => match __lookahead.1 {
                                __tok @ Token::KeywordFor => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            10 => match __lookahead.1 {
                                __tok @ Token::KeywordIf => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            11 => match __lookahead.1 {
                                __tok @ Token::Unimplemented => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            12 => match __lookahead.1 {
                                __tok @ Token::CurlyBraceOpen => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            13 => match __lookahead.1 {
                                __tok @ Token::CurlyBraceClose => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            14 => match __lookahead.1 {
                                __tok @ Token::KeywordBorrow => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            15 => match __lookahead.1 {
                                __tok @ Token::KeywordDef => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            16 => match __lookahead.1 {
                                Token::Identifier(__tok0) => __Symbol::Variant1((__tok0)),
                                _ => unreachable!(),
                            },
                            17 => match __lookahead.1 {
                                __tok @ Token::KeywordLet => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            18 => match __lookahead.1 {
                                __tok @ Token::KeywordLoop => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            19 => match __lookahead.1 {
                                __tok @ Token::Newline => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            20 => match __lookahead.1 {
                                __tok @ Token::KeywordOwn => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            21 => match __lookahead.1 {
                                __tok @ Token::KeywordSelf => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            22 => match __lookahead.1 {
                                __tok @ Token::KeywordStruct => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            23 => match __lookahead.1 {
                                __tok @ Token::KeywordWhile => __Symbol::Variant0((__tok)),
                                _ => unreachable!(),
                            },
                            _ => unreachable!(),
                        };
                        __states.push(__action - 1);
                        __symbols.push((__lookahead.0, __symbol, __lookahead.2));
                        continue '__shift;
                    } else if __action < 0 {
                        if let Some(r) = __reduce(__action, Some(&__lookahead.0), &mut __states, &mut __symbols, ::std::marker::PhantomData::<()>) {
                            if r.is_err() {
                                return r;
                            }
                            return Err(__lalrpop_util::ParseError::ExtraToken { token: __lookahead });
                        }
                    } else {
                        let mut __err_lookahead = Some(__lookahead);
                        let mut __err_integer: Option<usize> = Some(__integer);
                        let __state = *__states.last().unwrap() as usize;
                        let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                            token: __err_lookahead,
                            expected: __expected_tokens(__state),
                        };
                        return Err(__error)
                    }
                }
            }
            loop {
                let __state = *__states.last().unwrap() as usize;
                let __action = __EOF_ACTION[__state];
                if __action < 0 {
                    if let Some(r) = __reduce(__action, None, &mut __states, &mut __symbols, ::std::marker::PhantomData::<()>) {
                        return r;
                    }
                } else {
                    let mut __err_lookahead = None;
                    let mut __err_integer: Option<usize> = None;
                    let __state = *__states.last().unwrap() as usize;
                    let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                        token: __err_lookahead,
                        expected: __expected_tokens(__state),
                    };
                    return Err(__error)
                }
            }
        }
    }
    pub(crate) fn __reduce<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<Module,__lalrpop_util::ParseError<ByteIndex, Token, ParseError>>>
    {
        let (__pop_states, __symbol, __nonterminal) = match -__action {
            1 => {
                __reduce1(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                __reduce28(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            29 => {
                __reduce29(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            30 => {
                __reduce30(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            31 => {
                __reduce31(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                __reduce98(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            99 => {
                __reduce99(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                __reduce101(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            102 => {
                __reduce102(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            103 => {
                __reduce103(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                // __Program = Program => ActionFn(0);
                let __sym0 = __pop_Variant31(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(__sym0);
                return Some(Ok(__nt));
            }
            105 => {
                __reduce105(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(__action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        __symbols.push(__symbol);
        let __state = *__states.last().unwrap() as usize;
        let __next_state = __GOTO[__state * 58 + __nonterminal] - 1;
        __states.push(__next_state);
        None
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, (), ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, (Token, Expression), ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, (::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>), ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Atom, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Block, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, BlockOrIf, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ByteIndex, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Def, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Expression, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Field, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, If, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Item, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Let, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant31<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Module, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant31(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Path, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Pattern, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Spanned<Mode>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Spanned<StringId>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Spanned<Type>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Statement, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, StringId, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant34<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Struct, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant34(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Token, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Vec<Field>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Vec<Spanned<StringId>>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, Vec<Statement>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant32<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::option::Option<()>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant32(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::option::Option<(Token, Expression)>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::option::Option<Field>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::option::Option<Spanned<StringId>>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::option::Option<Spanned<Type>>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant33<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::option::Option<Statement>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant33(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::vec::Vec<Field>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::vec::Vec<Spanned<StringId>>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::vec::Vec<Statement>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant35<
    >(
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>
    ) -> (ByteIndex, ::std::vec::Vec<Token>, ByteIndex)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant35(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    pub(crate) fn __reduce1<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (":" <Type>) = ":", Type => ActionFn(56);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant2(__nt), __end);
        (2, __symbol, 0)
    }
    pub(crate) fn __reduce2<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (":" <Type>)? = ":", Type => ActionFn(91);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action91::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant3(__nt), __end);
        (2, __symbol, 1)
    }
    pub(crate) fn __reduce3<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (":" <Type>)? =  => ActionFn(55);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action55::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant3(__nt), __end);
        (0, __symbol, 1)
    }
    pub(crate) fn __reduce4<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ("=" Expr) = "=", Expr => ActionFn(53);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action53::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant4(__nt), __end);
        (2, __symbol, 2)
    }
    pub(crate) fn __reduce5<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ("=" Expr)? = "=", Expr => ActionFn(94);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant5(__nt), __end);
        (2, __symbol, 3)
    }
    pub(crate) fn __reduce6<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ("=" Expr)? =  => ActionFn(52);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action52::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant5(__nt), __end);
        (0, __symbol, 3)
    }
    pub(crate) fn __reduce7<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Field> COMMA) = Field, COMMA => ActionFn(70);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action70::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant6(__nt), __end);
        (2, __symbol, 4)
    }
    pub(crate) fn __reduce8<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Field> COMMA)* =  => ActionFn(68);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action68::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant7(__nt), __end);
        (0, __symbol, 5)
    }
    pub(crate) fn __reduce9<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Field> COMMA)* = (<Field> COMMA)+ => ActionFn(69);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant7(__nt), __end);
        (1, __symbol, 5)
    }
    pub(crate) fn __reduce10<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Field> COMMA)+ = Field, COMMA => ActionFn(97);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action97::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant7(__nt), __end);
        (2, __symbol, 6)
    }
    pub(crate) fn __reduce11<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Field> COMMA)+ = (<Field> COMMA)+, Field, COMMA => ActionFn(98);
        let __sym2 = __pop_Variant16(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action98::<>(__sym0, __sym1, __sym2);
        let __symbol = (__start, __Symbol::Variant7(__nt), __end);
        (3, __symbol, 6)
    }
    pub(crate) fn __reduce12<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Identifier> "::") = Identifier, "::" => ActionFn(79);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action79::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant8(__nt), __end);
        (2, __symbol, 7)
    }
    pub(crate) fn __reduce13<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Identifier> "::")* =  => ActionFn(77);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action77::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant9(__nt), __end);
        (0, __symbol, 8)
    }
    pub(crate) fn __reduce14<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Identifier> "::")* = (<Identifier> "::")+ => ActionFn(78);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant9(__nt), __end);
        (1, __symbol, 8)
    }
    pub(crate) fn __reduce15<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Identifier> "::")+ = Identifier, "::" => ActionFn(101);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action101::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant9(__nt), __end);
        (2, __symbol, 9)
    }
    pub(crate) fn __reduce16<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Identifier> "::")+ = (<Identifier> "::")+, Identifier, "::" => ActionFn(102);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action102::<>(__sym0, __sym1, __sym2);
        let __symbol = (__start, __Symbol::Variant9(__nt), __end);
        (3, __symbol, 9)
    }
    pub(crate) fn __reduce17<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Statement> SEP) = Statement, SEP => ActionFn(84);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action84::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant10(__nt), __end);
        (2, __symbol, 10)
    }
    pub(crate) fn __reduce18<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Statement> SEP)* =  => ActionFn(82);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action82::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant11(__nt), __end);
        (0, __symbol, 11)
    }
    pub(crate) fn __reduce19<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Statement> SEP)* = (<Statement> SEP)+ => ActionFn(83);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant11(__nt), __end);
        (1, __symbol, 11)
    }
    pub(crate) fn __reduce20<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Statement> SEP)+ = Statement, SEP => ActionFn(105);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action105::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant11(__nt), __end);
        (2, __symbol, 12)
    }
    pub(crate) fn __reduce21<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // (<Statement> SEP)+ = (<Statement> SEP)+, Statement, SEP => ActionFn(106);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action106::<>(__sym0, __sym1, __sym2);
        let __symbol = (__start, __Symbol::Variant11(__nt), __end);
        (3, __symbol, 12)
    }
    pub(crate) fn __reduce22<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // @L =  => ActionFn(63);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action63::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant12(__nt), __end);
        (0, __symbol, 13)
    }
    pub(crate) fn __reduce23<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // @R =  => ActionFn(62);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action62::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant12(__nt), __end);
        (0, __symbol, 14)
    }
    pub(crate) fn __reduce24<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Block = "{", PrefixDelim<Statement, SEP>, "}" => ActionFn(17);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action17::<>(__sym0, __sym1, __sym2);
        let __symbol = (__start, __Symbol::Variant13(__nt), __end);
        (3, __symbol, 15)
    }
    pub(crate) fn __reduce25<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // BlockItem = Struct => ActionFn(3);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant14(__nt), __end);
        (1, __symbol, 16)
    }
    pub(crate) fn __reduce26<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // BlockItem = Def => ActionFn(4);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant14(__nt), __end);
        (1, __symbol, 16)
    }
    pub(crate) fn __reduce27<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // BlockOrIf = Block => ActionFn(18);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant15(__nt), __end);
        (1, __symbol, 17)
    }
    pub(crate) fn __reduce28<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // BlockOrIf = ExprIf => ActionFn(19);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant15(__nt), __end);
        (1, __symbol, 17)
    }
    pub(crate) fn __reduce29<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // BlockOrIf = ExprIfLet => ActionFn(20);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant15(__nt), __end);
        (1, __symbol, 17)
    }
    pub(crate) fn __reduce30<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // COMMA = "," => ActionFn(135);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action135::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant16(__nt), __end);
        (1, __symbol, 18)
    }
    pub(crate) fn __reduce31<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // COMMA = ",", newline+ => ActionFn(136);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action136::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant16(__nt), __end);
        (2, __symbol, 18)
    }
    pub(crate) fn __reduce32<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // COMMA = newline+, "," => ActionFn(137);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action137::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant16(__nt), __end);
        (2, __symbol, 18)
    }
    pub(crate) fn __reduce33<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // COMMA = newline+, ",", newline+ => ActionFn(138);
        let __sym2 = __pop_Variant35(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action138::<>(__sym0, __sym1, __sym2);
        let __symbol = (__start, __Symbol::Variant16(__nt), __end);
        (3, __symbol, 18)
    }
    pub(crate) fn __reduce34<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Def = def, Identifier, FnDecl, Block => ActionFn(9);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action9::<>(__sym0, __sym1, __sym2, __sym3);
        let __symbol = (__start, __Symbol::Variant17(__nt), __end);
        (4, __symbol, 19)
    }
    pub(crate) fn __reduce35<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Field, COMMA> = Field => ActionFn(121);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant18(__nt), __end);
        (1, __symbol, 20)
    }
    pub(crate) fn __reduce36<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Field, COMMA> =  => ActionFn(122);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action122::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant18(__nt), __end);
        (0, __symbol, 20)
    }
    pub(crate) fn __reduce37<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Field, COMMA> = (<Field> COMMA)+, Field => ActionFn(123);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant18(__nt), __end);
        (2, __symbol, 20)
    }
    pub(crate) fn __reduce38<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Field, COMMA> = (<Field> COMMA)+ => ActionFn(124);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action124::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant18(__nt), __end);
        (1, __symbol, 20)
    }
    pub(crate) fn __reduce39<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Identifier, "::"> = Identifier => ActionFn(125);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action125::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant19(__nt), __end);
        (1, __symbol, 21)
    }
    pub(crate) fn __reduce40<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Identifier, "::"> =  => ActionFn(126);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action126::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant19(__nt), __end);
        (0, __symbol, 21)
    }
    pub(crate) fn __reduce41<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Identifier, "::"> = (<Identifier> "::")+, Identifier => ActionFn(127);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action127::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant19(__nt), __end);
        (2, __symbol, 21)
    }
    pub(crate) fn __reduce42<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Identifier, "::"> = (<Identifier> "::")+ => ActionFn(128);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action128::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant19(__nt), __end);
        (1, __symbol, 21)
    }
    pub(crate) fn __reduce43<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Statement, SEP> = Statement => ActionFn(131);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action131::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant20(__nt), __end);
        (1, __symbol, 22)
    }
    pub(crate) fn __reduce44<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Statement, SEP> =  => ActionFn(132);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action132::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant20(__nt), __end);
        (0, __symbol, 22)
    }
    pub(crate) fn __reduce45<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Statement, SEP> = (<Statement> SEP)+, Statement => ActionFn(133);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action133::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant20(__nt), __end);
        (2, __symbol, 22)
    }
    pub(crate) fn __reduce46<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Delim<Statement, SEP> = (<Statement> SEP)+ => ActionFn(134);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action134::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant20(__nt), __end);
        (1, __symbol, 22)
    }
    pub(crate) fn __reduce47<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Expr = ExprIf => ActionFn(29);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant21(__nt), __end);
        (1, __symbol, 23)
    }
    pub(crate) fn __reduce48<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Expr = ExprIfLet => ActionFn(30);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant21(__nt), __end);
        (1, __symbol, 23)
    }
    pub(crate) fn __reduce49<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ExprAtom = Lit => ActionFn(35);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant22(__nt), __end);
        (1, __symbol, 24)
    }
    pub(crate) fn __reduce50<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ExprAtom = PathExpr => ActionFn(36);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant22(__nt), __end);
        (1, __symbol, 24)
    }
    pub(crate) fn __reduce51<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ExprAtom = self => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant22(__nt), __end);
        (1, __symbol, 24)
    }
    pub(crate) fn __reduce52<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ExprIf = "if", Expr, Block => ActionFn(31);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action31::<>(__sym0, __sym1, __sym2);
        let __symbol = (__start, __Symbol::Variant21(__nt), __end);
        (3, __symbol, 25)
    }
    pub(crate) fn __reduce53<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ExprIf = "if", Expr, Block, "else", BlockOrIf => ActionFn(32);
        let __sym4 = __pop_Variant15(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action32::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        let __symbol = (__start, __Symbol::Variant21(__nt), __end);
        (5, __symbol, 25)
    }
    pub(crate) fn __reduce54<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ExprIfLet = "if", let, Pat, "=", Expr, Block => ActionFn(33);
        let __sym5 = __pop_Variant13(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action33::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        let __symbol = (__start, __Symbol::Variant23(__nt), __end);
        (6, __symbol, 26)
    }
    pub(crate) fn __reduce55<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // ExprIfLet = "if", let, Pat, "=", Expr, Block, "else", BlockOrIf => ActionFn(34);
        let __sym7 = __pop_Variant15(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant13(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action34::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        let __symbol = (__start, __Symbol::Variant23(__nt), __end);
        (8, __symbol, 26)
    }
    pub(crate) fn __reduce56<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Field = Identifier, ":", Type => ActionFn(8);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action8::<>(__sym0, __sym1, __sym2);
        let __symbol = (__start, __Symbol::Variant6(__nt), __end);
        (3, __symbol, 27)
    }
    pub(crate) fn __reduce57<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Field? = Field => ActionFn(66);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant24(__nt), __end);
        (1, __symbol, 28)
    }
    pub(crate) fn __reduce58<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Field? =  => ActionFn(67);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action67::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant24(__nt), __end);
        (0, __symbol, 28)
    }
    pub(crate) fn __reduce59<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Fields = Delim<Field, COMMA> => ActionFn(6);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant18(__nt), __end);
        (1, __symbol, 29)
    }
    pub(crate) fn __reduce60<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // FnDecl = FnParams, RetTy => ActionFn(129);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action129::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (2, __symbol, 30)
    }
    pub(crate) fn __reduce61<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // FnDecl = FnParams => ActionFn(130);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action130::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (1, __symbol, 30)
    }
    pub(crate) fn __reduce62<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // FnParams = "unimpl" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (1, __symbol, 31)
    }
    pub(crate) fn __reduce63<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Identifier = identifier => ActionFn(115);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant8(__nt), __end);
        (1, __symbol, 32)
    }
    pub(crate) fn __reduce64<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Identifier? = Identifier => ActionFn(75);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action75::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant26(__nt), __end);
        (1, __symbol, 33)
    }
    pub(crate) fn __reduce65<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Identifier? =  => ActionFn(76);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action76::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant26(__nt), __end);
        (0, __symbol, 33)
    }
    pub(crate) fn __reduce66<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Item = BlockItem => ActionFn(2);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant14(__nt), __end);
        (1, __symbol, 34)
    }
    pub(crate) fn __reduce67<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Let = let, Pat, MaybeTypeAscription, MaybeInitExpr => ActionFn(23);
        let __sym3 = __pop_Variant25(__symbols);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action23::<>(__sym0, __sym1, __sym2, __sym3);
        let __symbol = (__start, __Symbol::Variant27(__nt), __end);
        (4, __symbol, 35)
    }
    pub(crate) fn __reduce68<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Lit = "unimpl" => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (1, __symbol, 36)
    }
    pub(crate) fn __reduce69<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // MaybeInitExpr = "=", Expr => ActionFn(95);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action95::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (2, __symbol, 37)
    }
    pub(crate) fn __reduce70<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // MaybeInitExpr =  => ActionFn(96);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action96::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (0, __symbol, 37)
    }
    pub(crate) fn __reduce71<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // MaybeTypeAscription = ":", Type => ActionFn(92);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action92::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (2, __symbol, 38)
    }
    pub(crate) fn __reduce72<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // MaybeTypeAscription =  => ActionFn(93);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action93::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (0, __symbol, 38)
    }
    pub(crate) fn __reduce73<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Mode = own => ActionFn(116);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action116::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant28(__nt), __end);
        (1, __symbol, 39)
    }
    pub(crate) fn __reduce74<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Mode = borrow => ActionFn(117);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant28(__nt), __end);
        (1, __symbol, 39)
    }
    pub(crate) fn __reduce75<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Newlines = newline+ => ActionFn(44);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (1, __symbol, 40)
    }
    pub(crate) fn __reduce76<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Pat = "_" => ActionFn(26);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant29(__nt), __end);
        (1, __symbol, 41)
    }
    pub(crate) fn __reduce77<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Pat = Identifier => ActionFn(27);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant29(__nt), __end);
        (1, __symbol, 41)
    }
    pub(crate) fn __reduce78<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Pat = own, Identifier => ActionFn(28);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action28::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant29(__nt), __end);
        (2, __symbol, 41)
    }
    pub(crate) fn __reduce79<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Path<"."> = PrefixDelim<Identifier, "::"> => ActionFn(49);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant30(__nt), __end);
        (1, __symbol, 42)
    }
    pub(crate) fn __reduce80<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Path<"."> = Delim<Identifier, "::"> => ActionFn(50);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant30(__nt), __end);
        (1, __symbol, 42)
    }
    pub(crate) fn __reduce81<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Path<"::"> = PrefixDelim<Identifier, "::"> => ActionFn(47);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant30(__nt), __end);
        (1, __symbol, 43)
    }
    pub(crate) fn __reduce82<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Path<"::"> = Delim<Identifier, "::"> => ActionFn(48);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant30(__nt), __end);
        (1, __symbol, 43)
    }
    pub(crate) fn __reduce83<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // PathExpr = Path<"."> => ActionFn(39);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant30(__nt), __end);
        (1, __symbol, 44)
    }
    pub(crate) fn __reduce84<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // PathExpr = Path<"::"> => ActionFn(40);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant30(__nt), __end);
        (1, __symbol, 44)
    }
    pub(crate) fn __reduce85<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // PrefixDelim<Identifier, "::"> = Delim<Identifier, "::"> => ActionFn(73);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant19(__nt), __end);
        (1, __symbol, 45)
    }
    pub(crate) fn __reduce86<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // PrefixDelim<Identifier, "::"> = "::", Delim<Identifier, "::"> => ActionFn(74);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action74::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant19(__nt), __end);
        (2, __symbol, 45)
    }
    pub(crate) fn __reduce87<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // PrefixDelim<Statement, SEP> = Delim<Statement, SEP> => ActionFn(57);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant20(__nt), __end);
        (1, __symbol, 46)
    }
    pub(crate) fn __reduce88<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // PrefixDelim<Statement, SEP> = SEP, Delim<Statement, SEP> => ActionFn(58);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant20(__nt), __end);
        (2, __symbol, 46)
    }
    pub(crate) fn __reduce89<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Program = Item => ActionFn(139);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action139::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant31(__nt), __end);
        (1, __symbol, 47)
    }
    pub(crate) fn __reduce90<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Program = Item, newline+ => ActionFn(140);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action140::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant31(__nt), __end);
        (2, __symbol, 47)
    }
    pub(crate) fn __reduce91<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // RetTy = "->", Type => ActionFn(12);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action12::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (2, __symbol, 48)
    }
    pub(crate) fn __reduce92<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // RetTy? = RetTy => ActionFn(59);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant32(__nt), __end);
        (1, __symbol, 49)
    }
    pub(crate) fn __reduce93<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // RetTy? =  => ActionFn(60);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action60::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant32(__nt), __end);
        (0, __symbol, 49)
    }
    pub(crate) fn __reduce94<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // SEP = ";" => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (1, __symbol, 50)
    }
    pub(crate) fn __reduce95<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // SEP = Newlines => ActionFn(43);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant25(__nt), __end);
        (1, __symbol, 50)
    }
    pub(crate) fn __reduce96<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Statement = Let => ActionFn(21);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action21::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant10(__nt), __end);
        (1, __symbol, 51)
    }
    pub(crate) fn __reduce97<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Statement = Block => ActionFn(22);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant10(__nt), __end);
        (1, __symbol, 51)
    }
    pub(crate) fn __reduce98<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Statement? = Statement => ActionFn(80);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant33(__nt), __end);
        (1, __symbol, 52)
    }
    pub(crate) fn __reduce99<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Statement? =  => ActionFn(81);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action81::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant33(__nt), __end);
        (0, __symbol, 52)
    }
    pub(crate) fn __reduce100<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Struct = struct, Identifier, "{", Fields, "}" => ActionFn(141);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        let __symbol = (__start, __Symbol::Variant34(__nt), __end);
        (5, __symbol, 53)
    }
    pub(crate) fn __reduce101<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Struct = struct, Identifier, "{", newline+, Fields, "}" => ActionFn(142);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant35(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        let __symbol = (__start, __Symbol::Variant34(__nt), __end);
        (6, __symbol, 53)
    }
    pub(crate) fn __reduce102<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Type = Identifier => ActionFn(119);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant2(__nt), __end);
        (1, __symbol, 54)
    }
    pub(crate) fn __reduce103<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // Type = Mode, Identifier => ActionFn(120);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant28(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant2(__nt), __end);
        (2, __symbol, 54)
    }
    pub(crate) fn __reduce105<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // newline* =  => ActionFn(64);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action64::<>(&__start, &__end);
        let __symbol = (__start, __Symbol::Variant35(__nt), __end);
        (0, __symbol, 56)
    }
    pub(crate) fn __reduce106<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // newline* = newline+ => ActionFn(65);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant35(__nt), __end);
        (1, __symbol, 56)
    }
    pub(crate) fn __reduce107<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // newline+ = newline => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45::<>(__sym0);
        let __symbol = (__start, __Symbol::Variant35(__nt), __end);
        (1, __symbol, 57)
    }
    pub(crate) fn __reduce108<
    >(
        __action: i8,
        __lookahead_start: Option<&ByteIndex>,
        __states: &mut ::std::vec::Vec<i8>,
        __symbols: &mut ::std::vec::Vec<(ByteIndex,__Symbol<>,ByteIndex)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, (ByteIndex,__Symbol<>,ByteIndex), usize)
    {
        // newline+ = newline+, newline => ActionFn(46);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant35(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(__sym0, __sym1);
        let __symbol = (__start, __Symbol::Variant35(__nt), __end);
        (2, __symbol, 57)
    }
}
pub use self::__parse__Program::ProgramParser;

fn __action0<
>(
    (_, __0, _): (ByteIndex, Module, ByteIndex),
) -> Module
{
    (__0)
}

fn __action1<
>(
    (_, __0, _): (ByteIndex, Item, ByteIndex),
    (_, _, _): (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
) -> Module
{
    Module::new(vec![__0])
}

fn __action2<
>(
    (_, __0, _): (ByteIndex, Item, ByteIndex),
) -> Item
{
    (__0)
}

fn __action3<
>(
    (_, __0, _): (ByteIndex, Struct, ByteIndex),
) -> Item
{
    Item::Struct(__0)
}

fn __action4<
>(
    (_, __0, _): (ByteIndex, Def, ByteIndex),
) -> Item
{
    unimplemented!()
}

fn __action5<
>(
    (_, l, _): (ByteIndex, ByteIndex, ByteIndex),
    (_, _, _): (ByteIndex, Token, ByteIndex),
    (_, name, _): (ByteIndex, Spanned<StringId>, ByteIndex),
    (_, _, _): (ByteIndex, Token, ByteIndex),
    (_, _, _): (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
    (_, fields, _): (ByteIndex, Vec<Field>, ByteIndex),
    (_, _, _): (ByteIndex, Token, ByteIndex),
    (_, r, _): (ByteIndex, ByteIndex, ByteIndex),
) -> Struct
{
    Struct::new(name, fields, Span::from(l, r))
}

fn __action6<
>(
    (_, fields, _): (ByteIndex, Vec<Field>, ByteIndex),
) -> Vec<Field>
{
    fields
}

fn __action7<
>(
    (_, __0, _): (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
    (_, __1, _): (ByteIndex, Token, ByteIndex),
    (_, __2, _): (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
) -> (::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>)
{
    (__0, __1, __2)
}

fn __action8<
>(
    (_, id, _): (ByteIndex, Spanned<StringId>, ByteIndex),
    (_, _, _): (ByteIndex, Token, ByteIndex),
    (_, ty, _): (ByteIndex, Spanned<Type>, ByteIndex),
) -> Field
{
    Field::new(id, ty)
}

fn __action9<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Spanned<StringId>, ByteIndex),
    (_, __2, _): (ByteIndex, (), ByteIndex),
    (_, __3, _): (ByteIndex, Block, ByteIndex),
) -> Def
{
    unimplemented!("Def")
}

fn __action10<
>(
    (_, __0, _): (ByteIndex, (), ByteIndex),
    (_, __1, _): (ByteIndex, ::std::option::Option<()>, ByteIndex),
) -> ()
{
    unimplemented!("FnDecl")
}

fn __action11<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
) -> ()
{
    unimplemented!("FnParams")
}

fn __action12<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Spanned<Type>, ByteIndex),
) -> ()
{
    unimplemented!("RetTy")
}

fn __action13<
>(
    (_, l, _): (ByteIndex, ByteIndex, ByteIndex),
    (_, id, _): (ByteIndex, Spanned<StringId>, ByteIndex),
    (_, r, _): (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<Type>
{
    Spanned::from(Type::new(None, id), l, r)
}

fn __action14<
>(
    (_, l, _): (ByteIndex, ByteIndex, ByteIndex),
    (_, mode, _): (ByteIndex, Spanned<Mode>, ByteIndex),
    (_, id, _): (ByteIndex, Spanned<StringId>, ByteIndex),
    (_, r, _): (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<Type>
{
    Spanned::from(Type::new(Some(mode), id), l, r)
}

fn __action15<
>(
    (_, l, _): (ByteIndex, ByteIndex, ByteIndex),
    (_, _, _): (ByteIndex, Token, ByteIndex),
    (_, r, _): (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<Mode>
{
    Spanned::from(Mode::Owned, l, r)
}

fn __action16<
>(
    (_, l, _): (ByteIndex, ByteIndex, ByteIndex),
    (_, _, _): (ByteIndex, Token, ByteIndex),
    (_, r, _): (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<Mode>
{
    Spanned::from(Mode::Borrowed, l, r)
}

fn __action17<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Vec<Statement>, ByteIndex),
    (_, __2, _): (ByteIndex, Token, ByteIndex),
) -> Block
{
    unimplemented!("Block")
}

fn __action18<
>(
    (_, __0, _): (ByteIndex, Block, ByteIndex),
) -> BlockOrIf
{
    unimplemented!("BlockOrIf::Block")
}

fn __action19<
>(
    (_, __0, _): (ByteIndex, Expression, ByteIndex),
) -> BlockOrIf
{
    unimplemented!("BlockOrIf::ExprIf")
}

fn __action20<
>(
    (_, __0, _): (ByteIndex, If, ByteIndex),
) -> BlockOrIf
{
    unimplemented!("BlockOrIf::ExprIfLet")
}

fn __action21<
>(
    (_, __0, _): (ByteIndex, Let, ByteIndex),
) -> Statement
{
    unimplemented!("Statement::Let")
}

fn __action22<
>(
    (_, __0, _): (ByteIndex, Block, ByteIndex),
) -> Statement
{
    unimplemented!("Statement::Block")
}

fn __action23<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Pattern, ByteIndex),
    (_, __2, _): (ByteIndex, (), ByteIndex),
    (_, __3, _): (ByteIndex, (), ByteIndex),
) -> Let
{
    unimplemented!("Let")
}

fn __action24<
>(
    (_, __0, _): (ByteIndex, ::std::option::Option<Spanned<Type>>, ByteIndex),
) -> ()
{
    unimplemented!("MaybeTypeAscription")
}

fn __action25<
>(
    (_, __0, _): (ByteIndex, ::std::option::Option<(Token, Expression)>, ByteIndex),
) -> ()
{
    unimplemented!("MaybeInitExpr")
}

fn __action26<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
) -> Pattern
{
    unimplemented!("Pat::_")
}

fn __action27<
>(
    (_, __0, _): (ByteIndex, Spanned<StringId>, ByteIndex),
) -> Pattern
{
    unimplemented!("Pat::Identifier")
}

fn __action28<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Spanned<StringId>, ByteIndex),
) -> Pattern
{
    unimplemented!("Pat::own Identifier")
}

fn __action29<
>(
    (_, __0, _): (ByteIndex, Expression, ByteIndex),
) -> Expression
{
    unimplemented!("Expr::ExprIf")
}

fn __action30<
>(
    (_, __0, _): (ByteIndex, If, ByteIndex),
) -> Expression
{
    unimplemented!("Expr::ExprIfLet")
}

fn __action31<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Expression, ByteIndex),
    (_, __2, _): (ByteIndex, Block, ByteIndex),
) -> Expression
{
    unimplemented!("ExprIf::NoElse")
}

fn __action32<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Expression, ByteIndex),
    (_, __2, _): (ByteIndex, Block, ByteIndex),
    (_, __3, _): (ByteIndex, Token, ByteIndex),
    (_, __4, _): (ByteIndex, BlockOrIf, ByteIndex),
) -> Expression
{
    unimplemented!("ExprIf::Else")
}

fn __action33<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Token, ByteIndex),
    (_, __2, _): (ByteIndex, Pattern, ByteIndex),
    (_, __3, _): (ByteIndex, Token, ByteIndex),
    (_, __4, _): (ByteIndex, Expression, ByteIndex),
    (_, __5, _): (ByteIndex, Block, ByteIndex),
) -> If
{
    unimplemented!("ExprIfLet::NoElse")
}

fn __action34<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Token, ByteIndex),
    (_, __2, _): (ByteIndex, Pattern, ByteIndex),
    (_, __3, _): (ByteIndex, Token, ByteIndex),
    (_, __4, _): (ByteIndex, Expression, ByteIndex),
    (_, __5, _): (ByteIndex, Block, ByteIndex),
    (_, __6, _): (ByteIndex, Token, ByteIndex),
    (_, __7, _): (ByteIndex, BlockOrIf, ByteIndex),
) -> If
{
    unimplemented!("ExprIfLet::Else")
}

fn __action35<
>(
    (_, __0, _): (ByteIndex, (), ByteIndex),
) -> Atom
{
    unimplemented!("ExprAtom::Lit")
}

fn __action36<
>(
    (_, __0, _): (ByteIndex, Path, ByteIndex),
) -> Atom
{
    unimplemented!("ExprAtom::PathExpr")
}

fn __action37<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
) -> Atom
{
    unimplemented!("ExprAtom::Self")
}

fn __action38<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
) -> ()
{
    unimplemented!("Lit")
}

fn __action39<
>(
    (_, __0, _): (ByteIndex, Path, ByteIndex),
) -> Path
{
    unimplemented!("PathExpr::Dot")
}

fn __action40<
>(
    (_, __0, _): (ByteIndex, Path, ByteIndex),
) -> Path
{
    unimplemented!("PathExpr::DoubleColon")
}

fn __action41<
>(
    (_, l, _): (ByteIndex, ByteIndex, ByteIndex),
    (_, id, _): (ByteIndex, StringId, ByteIndex),
    (_, r, _): (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<StringId>
{
    Spanned::from(id, l, r)
}

fn __action42<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
) -> ()
{
    ()
}

fn __action43<
>(
    (_, __0, _): (ByteIndex, (), ByteIndex),
) -> ()
{
    ()
}

fn __action44<
>(
    (_, __0, _): (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
) -> ()
{
    ()
}

fn __action45<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
) -> ::std::vec::Vec<Token>
{
    vec![__0]
}

fn __action46<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
    (_, e, _): (ByteIndex, Token, ByteIndex),
) -> ::std::vec::Vec<Token>
{
    { let mut v = v; v.push(e); v }
}

fn __action47<
>(
    (_, __0, _): (ByteIndex, Vec<Spanned<StringId>>, ByteIndex),
) -> Path
{
    Path::new(__0)
}

fn __action48<
>(
    (_, __0, _): (ByteIndex, Vec<Spanned<StringId>>, ByteIndex),
) -> Path
{
    Path::new(__0)
}

fn __action49<
>(
    (_, __0, _): (ByteIndex, Vec<Spanned<StringId>>, ByteIndex),
) -> Path
{
    Path::new(__0)
}

fn __action50<
>(
    (_, __0, _): (ByteIndex, Vec<Spanned<StringId>>, ByteIndex),
) -> Path
{
    Path::new(__0)
}

fn __action51<
>(
    (_, __0, _): (ByteIndex, (Token, Expression), ByteIndex),
) -> ::std::option::Option<(Token, Expression)>
{
    Some(__0)
}

fn __action52<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::option::Option<(Token, Expression)>
{
    None
}

fn __action53<
>(
    (_, __0, _): (ByteIndex, Token, ByteIndex),
    (_, __1, _): (ByteIndex, Expression, ByteIndex),
) -> (Token, Expression)
{
    (__0, __1)
}

fn __action54<
>(
    (_, __0, _): (ByteIndex, Spanned<Type>, ByteIndex),
) -> ::std::option::Option<Spanned<Type>>
{
    Some(__0)
}

fn __action55<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::option::Option<Spanned<Type>>
{
    None
}

fn __action56<
>(
    (_, _, _): (ByteIndex, Token, ByteIndex),
    (_, __0, _): (ByteIndex, Spanned<Type>, ByteIndex),
) -> Spanned<Type>
{
    (__0)
}

fn __action57<
>(
    (_, d, _): (ByteIndex, Vec<Statement>, ByteIndex),
) -> Vec<Statement>
{
    d
}

fn __action58<
>(
    (_, _, _): (ByteIndex, (), ByteIndex),
    (_, d, _): (ByteIndex, Vec<Statement>, ByteIndex),
) -> Vec<Statement>
{
    d
}

fn __action59<
>(
    (_, __0, _): (ByteIndex, (), ByteIndex),
) -> ::std::option::Option<()>
{
    Some(__0)
}

fn __action60<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::option::Option<()>
{
    None
}

fn __action61<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Field>, ByteIndex),
    (_, e, _): (ByteIndex, ::std::option::Option<Field>, ByteIndex),
) -> Vec<Field>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

fn __action62<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ByteIndex
{
    __lookbehind.clone()
}

fn __action63<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ByteIndex
{
    __lookahead.clone()
}

fn __action64<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::vec::Vec<Token>
{
    vec![]
}

fn __action65<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
) -> ::std::vec::Vec<Token>
{
    v
}

fn __action66<
>(
    (_, __0, _): (ByteIndex, Field, ByteIndex),
) -> ::std::option::Option<Field>
{
    Some(__0)
}

fn __action67<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::option::Option<Field>
{
    None
}

fn __action68<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::vec::Vec<Field>
{
    vec![]
}

fn __action69<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Field>, ByteIndex),
) -> ::std::vec::Vec<Field>
{
    v
}

fn __action70<
>(
    (_, __0, _): (ByteIndex, Field, ByteIndex),
    (_, _, _): (ByteIndex, (::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>), ByteIndex),
) -> Field
{
    (__0)
}

fn __action71<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Statement>, ByteIndex),
    (_, e, _): (ByteIndex, ::std::option::Option<Statement>, ByteIndex),
) -> Vec<Statement>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

fn __action72<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Spanned<StringId>>, ByteIndex),
    (_, e, _): (ByteIndex, ::std::option::Option<Spanned<StringId>>, ByteIndex),
) -> Vec<Spanned<StringId>>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

fn __action73<
>(
    (_, d, _): (ByteIndex, Vec<Spanned<StringId>>, ByteIndex),
) -> Vec<Spanned<StringId>>
{
    d
}

fn __action74<
>(
    (_, _, _): (ByteIndex, Token, ByteIndex),
    (_, d, _): (ByteIndex, Vec<Spanned<StringId>>, ByteIndex),
) -> Vec<Spanned<StringId>>
{
    d
}

fn __action75<
>(
    (_, __0, _): (ByteIndex, Spanned<StringId>, ByteIndex),
) -> ::std::option::Option<Spanned<StringId>>
{
    Some(__0)
}

fn __action76<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::option::Option<Spanned<StringId>>
{
    None
}

fn __action77<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::vec::Vec<Spanned<StringId>>
{
    vec![]
}

fn __action78<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Spanned<StringId>>, ByteIndex),
) -> ::std::vec::Vec<Spanned<StringId>>
{
    v
}

fn __action79<
>(
    (_, __0, _): (ByteIndex, Spanned<StringId>, ByteIndex),
    (_, _, _): (ByteIndex, Token, ByteIndex),
) -> Spanned<StringId>
{
    (__0)
}

fn __action80<
>(
    (_, __0, _): (ByteIndex, Statement, ByteIndex),
) -> ::std::option::Option<Statement>
{
    Some(__0)
}

fn __action81<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::option::Option<Statement>
{
    None
}

fn __action82<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ::std::vec::Vec<Statement>
{
    vec![]
}

fn __action83<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Statement>, ByteIndex),
) -> ::std::vec::Vec<Statement>
{
    v
}

fn __action84<
>(
    (_, __0, _): (ByteIndex, Statement, ByteIndex),
    (_, _, _): (ByteIndex, (), ByteIndex),
) -> Statement
{
    (__0)
}

fn __action85<
>(
    (_, __0, _): (ByteIndex, Field, ByteIndex),
) -> ::std::vec::Vec<Field>
{
    vec![__0]
}

fn __action86<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Field>, ByteIndex),
    (_, e, _): (ByteIndex, Field, ByteIndex),
) -> ::std::vec::Vec<Field>
{
    { let mut v = v; v.push(e); v }
}

fn __action87<
>(
    (_, __0, _): (ByteIndex, Statement, ByteIndex),
) -> ::std::vec::Vec<Statement>
{
    vec![__0]
}

fn __action88<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Statement>, ByteIndex),
    (_, e, _): (ByteIndex, Statement, ByteIndex),
) -> ::std::vec::Vec<Statement>
{
    { let mut v = v; v.push(e); v }
}

fn __action89<
>(
    (_, __0, _): (ByteIndex, Spanned<StringId>, ByteIndex),
) -> ::std::vec::Vec<Spanned<StringId>>
{
    vec![__0]
}

fn __action90<
>(
    (_, v, _): (ByteIndex, ::std::vec::Vec<Spanned<StringId>>, ByteIndex),
    (_, e, _): (ByteIndex, Spanned<StringId>, ByteIndex),
) -> ::std::vec::Vec<Spanned<StringId>>
{
    { let mut v = v; v.push(e); v }
}

fn __action91<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, Spanned<Type>, ByteIndex),
) -> ::std::option::Option<Spanned<Type>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action56(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        __temp0,
    )
}

fn __action92<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, Spanned<Type>, ByteIndex),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action91(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24(
        __temp0,
    )
}

fn __action93<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ()
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action55(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24(
        __temp0,
    )
}

fn __action94<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, Expression, ByteIndex),
) -> ::std::option::Option<(Token, Expression)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action53(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action51(
        __temp0,
    )
}

fn __action95<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, Expression, ByteIndex),
) -> ()
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action94(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action25(
        __temp0,
    )
}

fn __action96<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> ()
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action52(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action25(
        __temp0,
    )
}

fn __action97<
>(
    __0: (ByteIndex, Field, ByteIndex),
    __1: (ByteIndex, (::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>), ByteIndex),
) -> ::std::vec::Vec<Field>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action70(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        __temp0,
    )
}

fn __action98<
>(
    __0: (ByteIndex, ::std::vec::Vec<Field>, ByteIndex),
    __1: (ByteIndex, Field, ByteIndex),
    __2: (ByteIndex, (::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>), ByteIndex),
) -> ::std::vec::Vec<Field>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action70(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        __0,
        __temp0,
    )
}

fn __action99<
>(
    __0: (ByteIndex, ::std::option::Option<Field>, ByteIndex),
) -> Vec<Field>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action68(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        __temp0,
        __0,
    )
}

fn __action100<
>(
    __0: (ByteIndex, ::std::vec::Vec<Field>, ByteIndex),
    __1: (ByteIndex, ::std::option::Option<Field>, ByteIndex),
) -> Vec<Field>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action69(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        __temp0,
        __1,
    )
}

fn __action101<
>(
    __0: (ByteIndex, Spanned<StringId>, ByteIndex),
    __1: (ByteIndex, Token, ByteIndex),
) -> ::std::vec::Vec<Spanned<StringId>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action79(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        __temp0,
    )
}

fn __action102<
>(
    __0: (ByteIndex, ::std::vec::Vec<Spanned<StringId>>, ByteIndex),
    __1: (ByteIndex, Spanned<StringId>, ByteIndex),
    __2: (ByteIndex, Token, ByteIndex),
) -> ::std::vec::Vec<Spanned<StringId>>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action79(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action90(
        __0,
        __temp0,
    )
}

fn __action103<
>(
    __0: (ByteIndex, ::std::option::Option<Spanned<StringId>>, ByteIndex),
) -> Vec<Spanned<StringId>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action77(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        __temp0,
        __0,
    )
}

fn __action104<
>(
    __0: (ByteIndex, ::std::vec::Vec<Spanned<StringId>>, ByteIndex),
    __1: (ByteIndex, ::std::option::Option<Spanned<StringId>>, ByteIndex),
) -> Vec<Spanned<StringId>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action78(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        __temp0,
        __1,
    )
}

fn __action105<
>(
    __0: (ByteIndex, Statement, ByteIndex),
    __1: (ByteIndex, (), ByteIndex),
) -> ::std::vec::Vec<Statement>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action84(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action87(
        __temp0,
    )
}

fn __action106<
>(
    __0: (ByteIndex, ::std::vec::Vec<Statement>, ByteIndex),
    __1: (ByteIndex, Statement, ByteIndex),
    __2: (ByteIndex, (), ByteIndex),
) -> ::std::vec::Vec<Statement>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action84(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action88(
        __0,
        __temp0,
    )
}

fn __action107<
>(
    __0: (ByteIndex, ::std::option::Option<Statement>, ByteIndex),
) -> Vec<Statement>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action82(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        __temp0,
        __0,
    )
}

fn __action108<
>(
    __0: (ByteIndex, ::std::vec::Vec<Statement>, ByteIndex),
    __1: (ByteIndex, ::std::option::Option<Statement>, ByteIndex),
) -> Vec<Statement>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action83(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        __temp0,
        __1,
    )
}

fn __action109<
>(
    __0: (ByteIndex, StringId, ByteIndex),
    __1: (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<StringId>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action63(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action41(
        __temp0,
        __0,
        __1,
    )
}

fn __action110<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<Mode>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action63(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        __temp0,
        __0,
        __1,
    )
}

fn __action111<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<Mode>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action63(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action16(
        __temp0,
        __0,
        __1,
    )
}

fn __action112<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, Spanned<StringId>, ByteIndex),
    __2: (ByteIndex, Token, ByteIndex),
    __3: (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
    __4: (ByteIndex, Vec<Field>, ByteIndex),
    __5: (ByteIndex, Token, ByteIndex),
    __6: (ByteIndex, ByteIndex, ByteIndex),
) -> Struct
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action63(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action5(
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

fn __action113<
>(
    __0: (ByteIndex, Spanned<StringId>, ByteIndex),
    __1: (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<Type>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action63(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        __temp0,
        __0,
        __1,
    )
}

fn __action114<
>(
    __0: (ByteIndex, Spanned<Mode>, ByteIndex),
    __1: (ByteIndex, Spanned<StringId>, ByteIndex),
    __2: (ByteIndex, ByteIndex, ByteIndex),
) -> Spanned<Type>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action63(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        __temp0,
        __0,
        __1,
        __2,
    )
}

fn __action115<
>(
    __0: (ByteIndex, StringId, ByteIndex),
) -> Spanned<StringId>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action109(
        __0,
        __temp0,
    )
}

fn __action116<
>(
    __0: (ByteIndex, Token, ByteIndex),
) -> Spanned<Mode>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action110(
        __0,
        __temp0,
    )
}

fn __action117<
>(
    __0: (ByteIndex, Token, ByteIndex),
) -> Spanned<Mode>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action111(
        __0,
        __temp0,
    )
}

fn __action118<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, Spanned<StringId>, ByteIndex),
    __2: (ByteIndex, Token, ByteIndex),
    __3: (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
    __4: (ByteIndex, Vec<Field>, ByteIndex),
    __5: (ByteIndex, Token, ByteIndex),
) -> Struct
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action62(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action112(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

fn __action119<
>(
    __0: (ByteIndex, Spanned<StringId>, ByteIndex),
) -> Spanned<Type>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action113(
        __0,
        __temp0,
    )
}

fn __action120<
>(
    __0: (ByteIndex, Spanned<Mode>, ByteIndex),
    __1: (ByteIndex, Spanned<StringId>, ByteIndex),
) -> Spanned<Type>
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action62(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action114(
        __0,
        __1,
        __temp0,
    )
}

fn __action121<
>(
    __0: (ByteIndex, Field, ByteIndex),
) -> Vec<Field>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action66(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action99(
        __temp0,
    )
}

fn __action122<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> Vec<Field>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action67(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action99(
        __temp0,
    )
}

fn __action123<
>(
    __0: (ByteIndex, ::std::vec::Vec<Field>, ByteIndex),
    __1: (ByteIndex, Field, ByteIndex),
) -> Vec<Field>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action66(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action100(
        __0,
        __temp0,
    )
}

fn __action124<
>(
    __0: (ByteIndex, ::std::vec::Vec<Field>, ByteIndex),
) -> Vec<Field>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action67(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action100(
        __0,
        __temp0,
    )
}

fn __action125<
>(
    __0: (ByteIndex, Spanned<StringId>, ByteIndex),
) -> Vec<Spanned<StringId>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action75(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action103(
        __temp0,
    )
}

fn __action126<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> Vec<Spanned<StringId>>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action76(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action103(
        __temp0,
    )
}

fn __action127<
>(
    __0: (ByteIndex, ::std::vec::Vec<Spanned<StringId>>, ByteIndex),
    __1: (ByteIndex, Spanned<StringId>, ByteIndex),
) -> Vec<Spanned<StringId>>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action75(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action104(
        __0,
        __temp0,
    )
}

fn __action128<
>(
    __0: (ByteIndex, ::std::vec::Vec<Spanned<StringId>>, ByteIndex),
) -> Vec<Spanned<StringId>>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action76(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action104(
        __0,
        __temp0,
    )
}

fn __action129<
>(
    __0: (ByteIndex, (), ByteIndex),
    __1: (ByteIndex, (), ByteIndex),
) -> ()
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action59(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        __0,
        __temp0,
    )
}

fn __action130<
>(
    __0: (ByteIndex, (), ByteIndex),
) -> ()
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action60(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        __0,
        __temp0,
    )
}

fn __action131<
>(
    __0: (ByteIndex, Statement, ByteIndex),
) -> Vec<Statement>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action107(
        __temp0,
    )
}

fn __action132<
>(
    __lookbehind: &ByteIndex,
    __lookahead: &ByteIndex,
) -> Vec<Statement>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action81(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action107(
        __temp0,
    )
}

fn __action133<
>(
    __0: (ByteIndex, ::std::vec::Vec<Statement>, ByteIndex),
    __1: (ByteIndex, Statement, ByteIndex),
) -> Vec<Statement>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action80(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action108(
        __0,
        __temp0,
    )
}

fn __action134<
>(
    __0: (ByteIndex, ::std::vec::Vec<Statement>, ByteIndex),
) -> Vec<Statement>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action81(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action108(
        __0,
        __temp0,
    )
}

fn __action135<
>(
    __0: (ByteIndex, Token, ByteIndex),
) -> (::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>)
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __start1 = __0.2.clone();
    let __end1 = __0.2.clone();
    let __temp0 = __action64(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action64(
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action7(
        __temp0,
        __0,
        __temp1,
    )
}

fn __action136<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
) -> (::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>)
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __start1 = __1.0.clone();
    let __end1 = __1.2.clone();
    let __temp0 = __action64(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action65(
        __1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action7(
        __temp0,
        __0,
        __temp1,
    )
}

fn __action137<
>(
    __0: (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
    __1: (ByteIndex, Token, ByteIndex),
) -> (::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>)
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __start1 = __1.2.clone();
    let __end1 = __1.2.clone();
    let __temp0 = __action65(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action64(
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action7(
        __temp0,
        __1,
        __temp1,
    )
}

fn __action138<
>(
    __0: (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
    __1: (ByteIndex, Token, ByteIndex),
    __2: (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
) -> (::std::vec::Vec<Token>, Token, ::std::vec::Vec<Token>)
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __start1 = __2.0.clone();
    let __end1 = __2.2.clone();
    let __temp0 = __action65(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action65(
        __2,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action7(
        __temp0,
        __1,
        __temp1,
    )
}

fn __action139<
>(
    __0: (ByteIndex, Item, ByteIndex),
) -> Module
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action64(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        __0,
        __temp0,
    )
}

fn __action140<
>(
    __0: (ByteIndex, Item, ByteIndex),
    __1: (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
) -> Module
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action65(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        __0,
        __temp0,
    )
}

fn __action141<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, Spanned<StringId>, ByteIndex),
    __2: (ByteIndex, Token, ByteIndex),
    __3: (ByteIndex, Vec<Field>, ByteIndex),
    __4: (ByteIndex, Token, ByteIndex),
) -> Struct
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action64(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action118(
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

fn __action142<
>(
    __0: (ByteIndex, Token, ByteIndex),
    __1: (ByteIndex, Spanned<StringId>, ByteIndex),
    __2: (ByteIndex, Token, ByteIndex),
    __3: (ByteIndex, ::std::vec::Vec<Token>, ByteIndex),
    __4: (ByteIndex, Vec<Field>, ByteIndex),
    __5: (ByteIndex, Token, ByteIndex),
) -> Struct
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action65(
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action118(
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
    )
}

pub trait __ToTriple<> {
    type Error;
    fn to_triple(value: Self) -> Result<(ByteIndex,Token,ByteIndex),Self::Error>;
}

impl<> __ToTriple<> for (ByteIndex, Token, ByteIndex) {
    type Error = ParseError;
    fn to_triple(value: Self) -> Result<(ByteIndex,Token,ByteIndex),ParseError> {
        Ok(value)
    }
}
impl<> __ToTriple<> for Result<(ByteIndex, Token, ByteIndex),ParseError> {
    type Error = ParseError;
    fn to_triple(value: Self) -> Result<(ByteIndex,Token,ByteIndex),ParseError> {
        value
    }
}
